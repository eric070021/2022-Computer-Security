from Crypto.Util.number import bytes_to_long, getPrime, inverse, long_to_bytes
import random
import math
import os

p = 92017932396773207330365205210913184771249549355771692523246399384571269833668487945963934319507538171501041280674304304879328757539798699280378034748542218248740777575679398093116579809607067129824965250071416089841516538588253944223235904445546895574651603636188746948921937704060334290364304972412697492577
enc = 87051682992840829567429886737255563980229964191963649650455667117285375334750716083826527488071966389632402954644144719710970265754062176648776448421065665281172133368294041777397049228273163978348132440822019295870429065335674151133125629968366491582233750452365390672536361224322642295053741696809519283644
hint = 112112804524582393858675176460595338484428048338611753655869733059768929120327158352572131172253127933611583356499525126040647290513660017529498493355846656594143774393256151536590212031416153303085867445488047592792290033548349001067687775149867134619114482370143917491889371548968347491490942978508386339813

middle = {}
keys = [0] * 5

def findkeys():
    global middle
    global keys
    for i in range(2, 1001):
        for j in range(1002, 2001):
            middle[pow(i, 65537, p)^pow(j, 65537, p)] = [i, j]
    
    print("table done\n")
    for i in range(2063, 3001):     
        for j in range(3002, 4001):
            if (pow(i, 65537, p) ^ pow(j, 65537, p) ^ pow(4668, 65537, p) ^ hint) in middle:
                print("INSIDE\n")
                keys[0] = pow(middle[pow(i, 65537, p) ^ pow(j, 65537, p) ^ pow(4668, 65537, p) ^ hint][0],  65537, p)
                keys[1] = pow(middle[pow(i, 65537, p) ^ pow(j, 65537, p) ^ pow(4668, 65537, p) ^ hint][1],  65537, p)
                keys[2] = pow(i, 65537, p)
                keys[3] = pow(j, 65537, p)
                keys[4] = pow(4668, 65537, p)
                return
findkeys()
print("key0: {}\nkey1: {}\nkey2: {}\nkey3: {}\nkey4: {}\n".format(keys[0], keys[1], keys[2], keys[3], keys[4]))

flag = enc
for i in range(4, -1, -1):
    flag = flag * inverse(keys[i], p) % p

print(long_to_bytes(flag))
